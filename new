import React, { Component } from 'react';
import { ActivityIndicator, Platform, View } from 'react-native';
import { Provider } from 'react-redux';
import PushNotificationIOS from "@react-native-community/push-notification-ios";
import PushNotification from "react-native-push-notification";
import { PersistGate } from 'redux-persist/integration/react'
import { SafeAreaProvider } from 'react-native-safe-area-context';
import { NavigationContainer } from '@react-navigation/native';
import { GestureHandlerRootView } from 'react-native-gesture-handler';
import Toast from 'react-native-toast-message';
import SplashScreen from 'react-native-splash-screen';
import { isEmulator } from 'react-native-device-info';

import persistor, { store } from './src/redux';
import BaseNavigator from './src/navigation/BaseNavigator';
import { navigationRef } from './src/navigation/NavigationService';
import NewOrderModal from './src/component/HomeTab/NewOrderModal';
import CustomBusyIndicator from './src/controls/CustomBusyIndicator';

const persistStore = persistor;
let unsubscribe = null;
export class App extends Component {
  constructor(props) {
    super(props);
  }

  componentDidMount() {
    SplashScreen.hide();
    if (!isEmulator) {
      this.configPush();
    }
  }

  configPush = () => {
    if (Platform.OS == 'ios') {
      PushNotification.getApplicationIconBadgeNumber((number) => {
        if (number > 0) {
          PushNotification.setApplicationIconBadgeNumber(0);
        }
      });
    }

    PushNotification.createChannel(
      {
        channelId: "channel_id_rsoye", // (required)
        channelName: "channel_rsoye", // (required)
        channelDescription: "A channel to categorise your notifications", // (optional) default: undefined.
        playSound: true, // (optional) default: true
        soundName: "default", // (optional) See `soundName` parameter of `localNotification` function
        // importance: 4, // (optional) default: 4. Int value of the Android notification importance
        vibrate: true, // (optional) default: true. Creates the default vibration patten if true.
      },
      (created) => console.log(`createChannel returned '${created}'`) // (optional) callback returns whether the channel was created, false means it already existed.
    );
    PushNotification.configure({
      // (optional) Called when Token is generated (iOS and Android)
      onRegister: function (token) {
        console.log("TOKEN:", token);
      },

      // (required) Called when a remote is received or opened, or local notification is opened
      onNotification: function (notification) {
        console.log("NOTIFICATION:", notification);
        // process the notification
        if (notification.foreground) {
          PushNotification.localNotification({
            title: notification.title,
            message: notification.message
          });
        }
        // (required) Called when a remote is received or opened, or local notification is opened
        notification.finish(PushNotificationIOS.FetchResult.NoData);
      },

      // (optional) Called when Registered Action is pressed and invokeApp is false, if true onNotification will be called (Android)
      onAction: function (notification) {
        console.log("ACTION:", notification.action);
        console.log("NOTIFICATION:", notification);

        // process the action
      },

      // (optional) Called when the user fails to register for remote notifications. Typically occurs when APNS is having issues, or the device is a simulator. (iOS)
      onRegistrationError: function (err) {
        console.error(err.message, err);
      },

      // IOS ONLY (optional): default: all - Permissions to register.
      permissions: {
        alert: true,
        badge: true,
        sound: true,
      },

      // Should the initial notification be popped automatically
      // default: true
      popInitialNotification: true,

      /**
       * (optional) default: true
       * - Specified if permissions (ios) and token (android and ios) will requested or not,
       * - if not, you must call PushNotificationsHandler.requestPermissions() later
       * - if you are not using remote notification or do not have Firebase installed, use this:
       *     requestPermissions: Platform.OS === 'ios'
       */
      requestPermissions: true,
    });
  }
  componentWillUnmount() {
    unsubscribe;
  }
  render() {
    return (
      <SafeAreaProvider style={{ backgroundColor: 'white' }}>
        <NavigationContainer ref={navigationRef} >
          <GestureHandlerRootView style={{ flex: 1 }}>
            <Provider store={store}>
              <PersistGate loading={null} persistor={persistStore}>
                <BaseNavigator />
              </PersistGate>
              <Toast />
              <NewOrderModal />
              <CustomBusyIndicator />
            </Provider>
          </GestureHandlerRootView>
        </NavigationContainer>
      </SafeAreaProvider>
    )
  }
}

export default App;